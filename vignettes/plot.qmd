
# Plots


```{r, include = FALSE}
## this vignette is in .Rbuildignore

knitr::opts_chunk$set(
  collapse = TRUE,
  fig.width = 9,
  fig.asp = .4,
  out.width = "100%",
  warning = FALSE,
  message = FALSE,
  comment = "#>"
)
```

The `marginaleffects` package includes three flexible functions to plot estimates and display interactions.

- `plot_predictions()`
- `plot_comparisons()`
- `plot_slopes()`

Those functions can be used to plot two kinds of quantities:

* Conditional estimates:
    - Estimates computed on a substantively meaningful grid of predictor values.
    - This is analogous to using the `newdata` argument with the `datagrid()` function in a `predictions()`, `comparisons()`, or `slopes()` call.
* Marginal estimates:
    - Estimates computed on the original data, but averaged by subgroup.
    - This is analogous to using the `newdata` argument with the `datagrid()` function in a `predictions()`, `comparisons()`, or `slopes()` call.
    

To begin, let's download data and fit a model:

::: {.panel-tabset group="language"}
### R
```{r}
## libraries
library(ggplot2)
library(patchwork) # combine plots with the + and / signs
library(marginaleffects)

## visual theme
theme_set(theme_minimal())
okabeito <- c('#E69F00', '#56B4E9', '#009E73', '#F0E442', '#0072B2', '#D55E00', '#CC79A7', '#999999', '#000000')
options(ggplot2.discrete.fill = okabeito)
options(ggplot2.discrete.colour = okabeito)
options(width = 1000)

## download data
dat <- read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/palmerpenguins/penguins.csv")

mod <- lm(body_mass_g ~ flipper_length_mm * species * bill_length_mm + island, data = dat)
```
### Python

```{python}
import statsmodels.formula.api as smf
from marginaleffects import *
from plotnine import *
import polars as pl

# visual theme
theme_set(theme_minimal())

dat = pl.read_csv("https://vincentarelbundock.github.io/Rdatasets/csv/palmerpenguins/penguins.csv")

mod = smf.ols(
  "body_mass_g ~ flipper_length_mm * species * bill_length_mm + island", 
  data = dat.to_pandas()).fit()
```
:::


## Predictions

### Conditional predictions

We call a prediction "conditional" when it is made on a grid of user-specified values. For example, we predict penguins' body mass for different values of flipper length and species:

::: {.panel-tabset group="language"}
### R
```{r}
pre <- predictions(mod, newdata = datagrid(flipper_length_mm = c(172, 231), species = unique))
pre
```
### Python

```{python}
pre = predictions(
  mod,
  newdata = datagrid(
    flipper_length_mm = [172, 231], 
    species = dat["species"].unique(),
    model = mod)
)
pre
```
:::

The `condition` argument of the `plot_predictions()` function can be used to build meaningful grids of predictor values somewhat more easily:

::: {.panel-tabset group="language"}
### R
```{r}
plot_predictions(mod, condition = c("flipper_length_mm", "species"))
```
### Python
```{python}
plot_predictions(mod, condition = ["flipper_length_mm", "species"])
```
:::

Note that the values at each end of the x-axis correspond to the numerical results produced above. For example, the predicted outcome for a Gentoo with 231mm flippers is `r round(pre$estimate[pre$species == "Gentoo" & pre$flipper_length_mm == 231])`.

We can include a 3rd conditioning variable, specify what values we want to consider, supply `R` functions to compute summaries, and use one of several string shortcuts for common reference values ("threenum", "minmax", "quartile", etc.):

::: {.panel-tabset group="language"}
### R
```{r}
plot_predictions(
    mod,
    condition = list(
        "flipper_length_mm" = 180:220,
        "bill_length_mm" = "threenum",
        "species" = unique))
```
### Python
```{python}
#| eval: false
plot_predictions(
    mod,
    condition = {
        "flipper_length_mm": list(range(180, 221)),
        "bill_length_mm": "threenum",
        "species": dat["species"].unique(),
        }
)
```
:::

See `?plot_predictions` for more information.

### Marginal predictions

We call a prediction "marginal" when it is the result of a two step process: (1) make predictions for each observed unit in the original dataset, and (2) average predictions across one or more categorical predictors. For example:

```{r}
predictions(mod, by = "species")
```

We can plot those predictions by using the analogous command:

```{r}
plot_predictions(mod, by = "species")
```

We can also make predictions at the intersections of different variables:

```{r}
predictions(mod, by = c("species", "island"))
```

Note that certain species only live on certain islands. Visually:

```{r}
plot_predictions(mod, by = c("species", "island"))
```

## Comparisons

### Conditional comparisons

The syntax for conditional comparisons is the same as the syntax for conditional predictions, except that we now need to specify the variable(s) of interest using an additional argument:

```{r}
comparisons(mod,
  variables = "flipper_length_mm",
  newdata = datagrid(flipper_length_mm = c(172, 231), species = unique))

plot_comparisons(mod,
  variables = "flipper_length_mm",
  condition = c("bill_length_mm", "species"))
```

We can specify custom comparisons, as we would using the `variables` argument of the `comparisons()` function. For example, see what happens to the predicted outcome when `flipper_length_mm` increases by 1 standard deviation or by 10mm:

```{r}
plot_comparisons(mod,
  variables = list("flipper_length_mm" = "sd"),
  condition = c("bill_length_mm", "species")) +

plot_comparisons(mod,
  variables = list("flipper_length_mm" = 10),
  condition = c("bill_length_mm", "species"))
```

Notice that the vertical scale is different in the plots above, reflecting the fact that we are plotting the effect of a change of 1 standard deviation on the left vs 10 units on the right.

Like the `comparisons()` function, `plot_comparisons()` is a very powerful tool because it allows us to compute and display custom comparisons such as differences, ratios, odds, lift, and arbitrary functions of predicted outcomes. For example, if we want to plot the ratio of predicted body mass for different species of penguins, we could do:

```{r}
plot_comparisons(mod,
  variables = "species",
  condition = "bill_length_mm",
  comparison = "ratio")
```

The left panel shows that the ratio of Chinstrap body mass to Adelie body mass is approximately constant, at slightly above 0.8. The right panel shows that the ratio of Gentoo to Adelie body mass is depends on their bill length. For birds with short bills, Gentoos seem to have smaller body mass than Adelies. For birds with long bills, Gentoos seem heavier than Adelies, although the null ratio (1) is not outside the confidence interval.

### Marginal comparisons

As above, we can also display marginal comparisons, by subgroups:

```{r}
plot_comparisons(mod,
  variables = "flipper_length_mm",
  by = "species") +

plot_comparisons(mod,
  variables = "flipper_length_mm",
  by = c("species", "island"))
```

Multiple contrasts at once:

```{r}
plot_comparisons(mod,
  variables = c("flipper_length_mm", "bill_length_mm"),
  by = c("species", "island"))
```

## Slopes

If you have read the sections above, the behavior of the `plot_slopes()` function should not surprise. Here we give two examples in which we compute display the elasticity of body mass with respect to bill length: 

```{r}
## conditional
plot_slopes(mod,
  variables = "bill_length_mm",
  slope = "eyex",
  condition = c("species", "island"))

## marginal
plot_slopes(mod,
  variables = "bill_length_mm",
  slope = "eyex",
  by = c("species", "island"))
```

And here is an example of a marginal effects (aka "slopes" or "partial derivatives") plot for a model with multiplicative interactions between continuous variables:

```{r}
mod2 <- lm(mpg ~ wt * qsec * factor(gear), data = mtcars)

plot_slopes(mod2, variables = "qsec", condition = c("wt", "gear"))
```

## Uncertainty estimates

As with all the other functions in the package, the `plot_*()` functions have a `conf_level` argument and a `vcov` argument which can be used to control the size of confidence intervals and the types of standard errors used:

```{r, fig.asp = .5, warning = FALSE}
plot_slopes(mod,
  variables = "bill_length_mm", condition = "flipper_length_mm") +
  ylim(c(-150, 200)) +

## clustered standard errors
plot_slopes(mod,
  vcov = ~island,
  variables = "bill_length_mm", condition = "flipper_length_mm") +
  ylim(c(-150, 200)) +

## alpha level
plot_slopes(mod,
  conf_level = .8,
  variables = "bill_length_mm", condition = "flipper_length_mm") +
  ylim(c(-150, 200))
```

## Customization

A very useful feature of the plotting functions in this package is that they produce normal `ggplot2` objects. So we can customize them to our heart's content, using `ggplot2` itself, or one of the many packages designed to augment its functionalities:

```{r, fig.asp = .7}
library(ggrepel)

mt <- mtcars
mt$label <- row.names(mt)

mod <- lm(mpg ~ hp * factor(cyl), data = mt)

plot_predictions(mod, condition = c("hp", "cyl"), points = .5, rug = TRUE, vcov = FALSE) +
    geom_text_repel(aes(x = hp, y = mpg, label = label),
                    data = subset(mt, hp > 250),
                    nudge_y = 2) +
    theme_classic()
```

All the plotting functions work with all the model supported by the `marginaleffects` package, so we can plot the output of a logistic regression model. This plot shows the probability of survival aboard the Titanic, for different ages and different ticket classes:

```{r, warning = FALSE}
library(ggdist)
library(ggplot2)

dat <- "https://vincentarelbundock.github.io/Rdatasets/csv/Stat2Data/Titanic.csv"
dat <- read.csv(dat)

mod <- glm(Survived ~ Age * SexCode * PClass, data = dat, family = binomial)

plot_predictions(mod, condition = c("Age", "PClass")) +
    geom_dots(
        alpha = .8,
        scale = .3,
        pch = 18,
        data = dat, aes(
        x = Age,
        y = Survived,
        side = ifelse(Survived == 1, "bottom", "top")))
```

Thanks to [Andrew Heiss](https://bayesf22-notebook.classes.andrewheiss.com/bayes-rules/13-chapter.html) who inspired this plot.

Designing effective data visualizations requires a lot of customization to the specific context and data. The plotting functions in `marginaleffects` offer a powerful way to iterate quickly between plots and models, but they obviously cannot support all the features that users may want. Thankfully, it is very easy to use the `slopes` functions to generate datasets that can then be used in `ggplot2` or any other data visualization tool. Just use the `draw` argument:

```{r}
p <- plot_predictions(mod, condition = c("Age", "PClass"), draw = FALSE)
head(p)
```

This allows us to feed the data easily to other functions, such as those in the useful `ggdist` and `distributional` packages:


```{r}
library(ggdist)
library(distributional)
plot_slopes(mod, variables = "SexCode", condition = c("Age", "PClass"), type = "link", draw = FALSE) |>
  ggplot() +
  stat_lineribbon(aes(
    x = Age,
    ydist = dist_normal(mu = estimate, sigma = std.error),
    fill = PClass),
    alpha = 1 / 4)
```

## Fits and smooths

We can compare the model predictors with fits and smoothers using the `geom_smooth()` function from the `ggplot2` package:

```{r}
dat <- "https://vincentarelbundock.github.io/Rdatasets/csv/Stat2Data/Titanic.csv"
dat <- read.csv(dat)
mod <- glm(Survived ~ Age * PClass, data = dat, family = binomial)

plot_predictions(mod, condition = c("Age", "PClass")) +
    geom_smooth(data = dat, aes(Age, Survived), method = "lm", se = FALSE, color = "black") +
    geom_smooth(data = dat, aes(Age, Survived), se = FALSE, color = "black")
```

## Groups and categorical outcomes 

In some models, `marginaleffects` functions generate different estimates for different groups, such as categorical outcomes. For example,

```{r}
library(MASS)
mod <- polr(factor(gear) ~ mpg + hp, data = mtcars)

predictions(mod)
```

In the resulting data frame, the `group` column identifies levels of the categorical response.

We can plot those estimates in the same way as before, by specifying `group` as one of the conditional variable, or by adding that column to a `facet_wrap()` call:


```{r, message = FALSE}
plot_predictions(mod, condition = c("mpg", "group"), type = "probs", vcov = FALSE)

plot_predictions(mod, condition = "mpg", type = "probs", vcov = FALSE) +
  facet_wrap(~ group)
```

## `plot()` and `marginaleffects` objects

Some users may feel inclined to call `plot()` on a object produced by `marginaleffects` object. Doing so will generate an informative error like this one:

```{r, error = TRUE}
mod <- lm(mpg ~ hp * wt * factor(cyl), data = mtcars)
p <- predictions(mod)
plot(p)
```

The reason for this error is that the user query is underspecified. `marginaleffects` allows users to compute so many quantities of interest that it is not clear what the user wants when they simply call `plot()`. Adding several new arguments would compete with the main plotting functions, and risk sowing confusion. The `marginaleffects` developers thus decided to support one main path to plotting: `plot_predictions()`, `plot_comparisons()`, and `plot_slopes()`.

That said, it may be useful to remind users that all `marginaleffects` output are standard "tidy" data frames. Although they get pretty-printed to the console, all the listed columns are accessible via standard `R` operators. For example:

```{r}
p <- avg_predictions(mod, by = "cyl")
p

p$estimate

p$std.error

p$conf.low
```


This allows us to plot all results very easily with standard plotting functions:

```{r}
plot_predictions(mod, by = "cyl")

plot(p$cyl, p$estimate)

ggplot(p, aes(x = cyl, y = estimate, ymin = conf.low, ymax = conf.high)) +
  geom_pointrange()
```
