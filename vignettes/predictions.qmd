---
title: Predictions
---

```{r, include = FALSE}
options(width = 1000)
knitr::opts_chunk$set(
  collapse = TRUE,
  fig.width = 6,
  fig.asp = .4,
  warning = FALSE,
  message = FALSE,
  comment = "#>"
)

library(marginaleffects)
library(patchwork)
library(ggplot2)

theme_set(theme_minimal())
```

![](fig/Crystal.png){width=30%}

# Definition and motivation

In the context of this package, an "adjusted prediction" is defined as:

> The outcome predicted by a fitted model on a specified scale for a given combination of values of the predictor variables, such as their observed values, their means, or factor levels (a.k.a. "reference grid").

Here, the word "Adjusted" simply means "model-derived" or "model-based."

Estimating predictions can allow us to answer a variety of important questions, such as:

* _Healthcare Research_: What is the expected probability of a 50-year-old smoker developing heart disease, adjusting for diet, exercise, and family history factors?
* _Sports Analytics_: What is the expected probability of a professional basketball team winning their next game, taking into account the team's recent performance, injuries, and the strength of the opposing team?
* _Political Science_: What is the expected turnout for elections in rural and urban areas, adjusting for national voting intentions and democratic characteristics.
* _Real Estate Pricing_: What is the expected price for a three-bedroom house in a suburban area, adjusting for the house's size, age, local amenities, and the current real estate market conditions?

In addition, the `marginaleffects` package allows analysts to conduct hypothesis tests to compare different predictions. As we will see below, the `hypothesis` argument of the `predictions()` function can test questions such as:

* Is the expected probability of developing a heart disease higher for a 40 year old man, or for a 55 year old woman?
* Is the expected grade point average of students in a 20-person class higher than the expected grade point average of students in a 30-person class, accounting for socio-demographic characteristics?

The `predictions()` function is *extremely* flexible, and it allows users to estimate a vast array of quantities of interest. To describe those quantities, this vignette breaks the problem down into 5 steps:

1. Quantity
2. Grid
3. Aggregation
4. Uncertainty
5. Test


# Quantity of interest

By default, the `predictions()` function calculates the regression-adjusted predicted values for every observation in the original dataset:

```{r}
library(marginaleffects)

lm_mod <- lm(mpg ~ hp + factor(cyl), data = mtcars)

pred <- predictions(lm_mod)

head(pred)
```

In many cases, this is too limiting. The function `predictions()` allows to specify a grid of 'typical' values over which to compute adjusted predictions. For more details, proceed to the Grid section.

## Prediction type (scale)

For most models,  `predictions()` generates adjusted predictions on the "response" scale, so the adjusted predictions should be interpreted on that scale. However, users can pass a string to the type argument, and predictions will consider different outcomes.

Using the `type` argument of the `predictions()` function we can specify the "scale" on which to make predictions. This refers to either the scale used to estimate the model (i.e., link scale) or to a more interpretable scale (e.g., response scale). For example, when fitting a linear regression model using the `lm()` function, the `"link"` scale and the response scale are identical. An "Adjusted Prediction" computed on either scale will be expressed as the mean value of the response variable at the given values of the predictor variables.

On the other hand, when fitting a binary logistic regression model using the `glm()` function (which uses a binomial family and a logit link ), the link scale and the response scale will be different: an "Adjusted Prediction" computed on the `"link"` scale will be expressed as a log odds of a "successful" response at the given values of the predictor variables, whereas an "Adjusted Prediction" computed on the `"response"` scale will be expressed as a probability that the response variable equals 1.

```{r}
glm_mod <- glm(am ~ mpg, family = binomial, data = mtcars)
pred <- predictions(glm_mod, type = "response")
head(pred)

pred <- predictions(glm_mod, type = "link")
head(pred)
```

The default value of the `type` argument for most models is `"response"`, which means that the `predictions()` function will compute predicted probabilities (binomial family), Poisson means (poisson family), etc. Users should refer to the documentation of the `predict` of the package they used to fit the model to know what values are allowable.  


# Grid 

A "profile" is a combination of values of the predictor variables in a model. A "grid" is a collection of one or more profiles. You can think of a "grid" as different rows in a dataset, where each row contains the information necessary to predict the outcome for one individual or unit of observation.

To compute adjusted predictions we must first specify the values of the predictors to consider: a "reference grid." For example, if our model is a linear model fitted with the lm() function which relates the response variable Happiness with the predictor variables Age, Gender and Income, the reference grid could be a `data.frame` with values for Age, Gender and Income: Age = 40, Gender = Male, Income = 60000. The reference grid can include many different rows if we want to make predictions for different combinations of predictors. The reference grid may or may not correspond to actual observations in the dataset used to fit the model; the example values given above could match the mean values of each variable, or they could represent a specific observed (or hypothetical) individual. 


### Empirical distribution

By default, the `predictions()` function uses the full original dataset as a reference grid. This means it will compute adjusted predictions for each of the individuals observed in the dataset that was used to fit the model:

```{r}
predictions(lm_mod)
```

### User-specified values

There are two main ways to select the reference grid over which we want to compute adjusted predictions. The first is using the `newdata` argument and the [`datagrid()` function](slopes.html). The second is with the `variables` argument.

We can also create a counterfactual data grid with the argument `grid_type = "counterfactual"`. The dataset is duplicated for each combination of the variable values specified in. Variables not explicitly supplied to `datagrid()` are set to their observed values in the original dataset. There is also an alternative approach to construct grids of predictors using the `grid_type = "counterfactual"` argument value.

The first strategy is to construct grids of predictors for adjusted predictions is to combine the `newdata` argument and the `datagrid` function. This function creates a "typical" dataset with all variables at their means or modes, except those we explicitly define:

```{r}
datagrid(cyl = c(4, 6, 8), model = lm_mod)
```

We can also use this `datagrid` function in a `predictions` call (omitting the `model` argument):

```{r}
predictions(lm_mod, newdata = datagrid())

predictions(lm_mod, newdata = datagrid(cyl = c(4, 6, 8)))
```

Users can change the summary function used to summarize each type of variables using the `FUN_numeric`, `FUN_factor`, and related arguments. For example:

```{r}
m <- lm(mpg ~ hp + drat + factor(cyl) + factor(am), data = mtcars)
predictions(m, newdata = datagrid(FUN_factor = unique, FUN_numeric = median))
```

The `data.frame` produced by `predictions` is "tidy", which makes it easy to manipulate with other `R` packages and functions:


```{r, message = FALSE}
library(tinytable)
library(tidyverse)

predictions(
  lm_mod,
  newdata = datagrid(cyl = mtcars$cyl, hp = c(100, 110))) |>
  select(hp, cyl, estimate) |>
  pivot_wider(values_from = estimate, names_from = cyl) |>
  tt(caption = "A table of Adjusted Predictions", digits = 3) |>
  group_tt(j = list("cyl" = 3))
```

### Representative values

Some analysts may want to calculate an "Adjusted Prediction at the Mean," that is, the predicted outcome when all the regressors are held at their mean (or mode). To achieve this, we use the `datagrid` function. By default, this function produces a grid of data with regressors at their means or modes, so all we need to do to get the APM is:

```{r}
predictions(lm_mod, newdata = "mean")
```
<!-- À VÉRIFIER SI C'EST LE BON MODÈLE QUI EST UTILISÉ ICI -->

This is equivalent to calling:

```{r}
predictions(lm_mod, newdata = datagrid())
```


### Counterfactual predictions

An alternative approach to construct grids of predictors is to use `grid_type = "counterfactual"` argument value. This will duplicate the *whole* dataset, with the different values specified by the user. 

For example, the `mtcars` dataset has 32 rows. This command produces a new dataset with 64 rows, with each row of the original dataset duplicated with the two values of the `am` variable supplied (0 and 1):

```{r}
glm_mod <- glm(vs ~ hp + am, data = mtcars, family = binomial)

nd <- datagrid(model = glm_mod, am = 0:1, grid_type = "counterfactual")

dim(nd)
```

Then, we can use this dataset and the `predictions` function to create interesting visualizations:

```{r, fig.asp = 1}
pred <- predictions(glm_mod, newdata = datagrid(am = 0:1, grid_type = "counterfactual")) |>
    select(am, estimate, rowidcf) |>
    pivot_wider(id_cols = rowidcf, 
                names_from = am,
                values_from = estimate)

ggplot(pred, aes(x = `0`, y = `1`)) +
    geom_point() +
    geom_abline(intercept = 0, slope = 1) +
    labs(x = "Predicted Pr(vs=1), when am = 0",
         y = "Predicted Pr(vs=1), when am = 1")
```

In this graph, each dot represents the predicted probability that `vs=1` for one observation of the dataset, in the counterfactual worlds where `am` is either 0 or 1. 


The `variables` argument is a handy way to create and make predictions on counterfactual datasets. For example, here the dataset that we used to fit the model has 32 rows. The counterfactual dataset with two distinct values of `hp` has 64 rows: each of the original rows appears twice, that is, once with each of the values that we specified in the `variables` argument:

```{r}
p <- predictions(lm_mod, variables = list(hp = c(100, 120)))
head(p)
nrow(p)
```


# Aggregation

Computing predictions for a large grid or for every observation in a dataset can be useful, but analysts may also find the results unwieldy and difficult to interpret. In many contexts, it makes sense to compute *aggregated* predictions, such as the average predicted outcome in the whole dataset, or by subgroups of the data.

## Average Adjusted Predictions (AAP)

An "Average Adjusted Prediction" is the outcome of a two step process:

1. Create a new dataset with each of the original regressor values, but fixing some regressors to values of interest.
2. Take the average of the predicted values in this new dataset.

We can obtain AAPs by applying the `avg_predictions()` functions or `by` argument:

```{r}
modlin <- lm(mpg ~ hp + factor(cyl), mtcars)
avg_predictions(modlin)
```

This is equivalent to:

```{r}
pred <- predictions(modlin)
mean(pred$estimate)
```

Note that in GLM models with a non-linear link function, the default `type` is `invlink(link)`. This means that predictions are first made on the link scale, averaged, and then back transformed. Thus, the average prediction may not be exactly identical to the average of predictions:

```{r}
glm_mod <- glm(vs ~ hp + am, data = mtcars, family = binomial)

avg_predictions(glm_mod)$estimate

## Step 1: predict on the link scale
p <- predictions(glm_mod, type = "link")$estimate
## Step 2: average
p <- mean(p)
## Step 3: backtransform
glm_mod$family$linkinv(p)
```

Users who want the average of individual-level predictions on the response scale can specify the `type` argument explicitly:

```{r}
avg_predictions(glm_mod, type = "response")
```

## Average Adjusted Predictions by Group

We can compute average adjusted predictions for different subsets of the data with the `by` argument.

```{r}
predictions(glm_mod, by = "am")
```

In the next example, we create a "counterfactual" data grid where each observation of the dataset is repeated twice, with different values of the `am` variable, and all other variables held at the observed values. We also show the equivalent results using `dplyr`:

```{r}
predictions(
    glm_mod,
    type = "response",
    by = "am",
    newdata = datagrid(am = 0:1, grid_type = "counterfactual"))

predictions(
    glm_mod,
    type = "response",
    newdata = datagrid(am = 0:1, grid_type = "counterfactual")) |>
    group_by(am) |>
    summarize(AAP = mean(estimate))
```

Note that the two results are exactly identical when we specify `type="response"` explicitly. However, they will differ slightly when we leave `type` unspecified, because `marginaleffects` will then automatically make predictions and average on the link scale, before backtransforming (`"invlink(link)"`):

```{r}
predictions(
    glm_mod,
    by = "am",
    newdata = datagrid(am = 0:1, grid_type = "counterfactual"))

predictions(
    glm_mod,
    type = "link",
    newdata = datagrid(am = 0:1, grid_type = "counterfactual")) |>
    group_by(am) |>
    summarize(AAP = glm_mod$family$linkinv(mean(estimate)))
```


# Uncertainty

As in the rest of the `marginaleffects` package, the `predictions()` family of functions accept a `vcov` argument which can be used to specify the type of standard errors to compute and report. We can also control the size of confidence intervals with `conf_level`. For instance, to compute heteroskedasticity-robust standard errors (Type 3) with 90% confidence intervals, we simply call:

```{r}
avg_predictions(lm_mod, by = "am",
    vcov = "HC3",
    conf_level = .9)
```

Notice that the test statistics are slightly different than with classical IID errors:

```{r}
avg_predictions(lm_mod,
    by = "am",
    conf_level = .9)
```


# Test


The [Hypothesis Tests vignette](https://marginaleffects.com/vignettes/hypothesis.html) offers a detailed tutorial on hypothesis and equivalence testing in `marginaleffects`. Here, we only demonstrate a simple case: testing the difference between the average predictions in two groups.

First, we compute average predictions in the group of `am=1` and `am=0`:

```{r}
avg_predictions(lm_mod,
    by = "am")
```

Now, we run a test of equality, where the null hypothesis is that the average predictions in the two groups are equal to one another. We use the `hypothesis` argument, either with a string formula or with the "pairwise" shortcut:


```{r}
avg_predictions(lm_mod,
    by = "am",
    hypothesis = "b1 = b2")

avg_predictions(lm_mod,
    by = "am",
    hypothesis = "pairwise")
```

Finally, we conduct an equivalence test to see if we can reject the hypothesis that the difference in average predictions is outside the [-10,10] interval:

```{r}
avg_predictions(lm_mod,
    by = "am",
    hypothesis = "pairwise",
    equivalence = c(-10, 10))
```



# Visualization

It is very easy to plot average predictions using the parallel syntax of the `plot_predictions()` function. This section introduce to some of its core arguments.

## Conditional Adjusted Predictions

First, we download the `ggplot2movies` dataset from the [RDatasets archive](https://vincentarelbundock.github.io/Rdatasets/articles/data.html). Then, we create a variable called `certified_fresh` for movies with a rating of at least 8. Finally, we discard some outliers and fit a logistic regression model: 

```{r, message = FALSE}
library(tidyverse)
dat <- read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/ggplot2movies/movies.csv") |>
    mutate(style = case_when(Action == 1 ~ "Action",
                             Comedy == 1 ~ "Comedy",
                             Drama == 1 ~ "Drama",
                             TRUE ~ "Other"),
           style = factor(style),
           certified_fresh = rating >= 8) |>
    dplyr::filter(length < 240)

mod <- glm(certified_fresh ~ length * style, data = dat, family = binomial)
```

We can plot adjusted predictions, conditional on the `length` variable using the `plot_predictions` function:

```{r}
mod <- glm(certified_fresh ~ length, data = dat, family = binomial)

plot_predictions(mod, condition = "length")
```

We can also introduce another condition which will display a categorical variable like `style` in different colors. This can be useful in models with interactions:

```{r}
mod <- glm(certified_fresh ~ length * style, data = dat, family = binomial)

plot_predictions(mod, condition = c("length", "style"))
```

With the `plot_predictions()` function, we can plot predictions on different outcome scales:

```{r}
mod <- glm(certified_fresh ~ length * style, data = dat, family = binomial)

plot_predictions(mod, condition = "length", type = "response")
```

```{r}
plot_predictions(mod, condition = "length", type = "link")
```


## Marginal Adjusted Predictions

The predictions displayed in the previous section by the `plot_predictions()` function, using the `condition` argument, can be said to be "conditional" in the sense that they are conditional on the values of the predictors in a constructed grid of "representative" values.

An alternative is plot "marginal" predictions using the `by` argument. The underlying process is to (1) compute predictions for each observation in the actually observed dataset, and then (2) average these predictions across some variable(s). This is equivalent to plotting the `avg_predictions(model, by='z')` call.

For example:

```{r}
plot_predictions(mod, by = "style")
```

## Prediction types 

The predictions function computes model-adjusted means on the scale of the output of the predict(model) function. By default, predict produces predictions on the "response" scale, so the adjusted predictions should be interpreted on that scale. However, users can pass a string to the type argument, and predictions will consider different outcomes.

We can plot predictions on different outcome scales:

```{r}
mod <- glm(am ~ mpg, family = binomial, data = mtcars)

plot_predictions(mod, condition = "mpg", type = "response")
```

```{r}
plot_predictions(mod, condition = "mpg", type = "link")
```


## Themes and styles

Since the output of `plot_predictions()` is a `ggplot2` object, it is very easy to customize. For example, we can add points for the actual observations of our dataset like so:

```{r}
#| fig.asp = .7
library(ggplot2)
library(ggrepel)

mt <- mtcars
mt$label <- row.names(mt)

mod <- lm(mpg ~ hp, data = mt)

plot_predictions(mod, condition = "hp") +
    geom_point(aes(x = hp, y = mpg), data = mt) +
    geom_rug(aes(x = hp, y = mpg), data = mt) +
    geom_text_repel(aes(x = hp, y = mpg, label = label),
                    data = subset(mt, hp > 250),
                    nudge_y = 2) +
    theme_classic()
```

## Customization

The [plot customization section of the Plots vignette](https://marginaleffects.com/vignettes/plot.html#customization) illustrates two more ways to customize plots. In addition to using the `plot_*()` function arguments, users can:

1. Modify the plot objects using `ggplot2` functions or add-on packages.
2. Extract the underlying plotting data with the `draw=FALSE` argument, and feed that data to their preferred plotting software.


# Categorical outcomes

One place where this is particularly useful is in multinomial models with different response levels. For example, here we compute the average predicted outcome for each outcome level in a multinomial logit model. Note that response levels are identified by the "group" column.

```{r}
library(nnet)
nom <- multinom(factor(gear) ~ mpg + am * vs, data = mtcars, trace = FALSE)

## first 5 raw predictions
predictions(nom, type = "probs") |> head()

## average predictions
avg_predictions(nom, type = "probs", by = "group")
```

## Custom aggregation

We can use custom aggregations by supplying a data frame to the `by` argument. All columns of this data frame must be present in the output of `predictions()`, and the data frame must also include a `by` column of labels. In this example, we "collapse" response groups:

```{r}
by <- data.frame(
    group = c("3", "4", "5"),
    by = c("3,4", "3,4", "5"))

predictions(nom, type = "probs", by = by)
```

This can be very useful in combination with the `hypothesis` argument. For example, here we compute the difference between average adjusted predictions for the 3 and 4 response levels, compared to the 5 response level:

```{r}
predictions(nom, type = "probs", by = by, hypothesis = "sequential")
```

We can also use more complicated aggregations. Here, we compute the predicted probability of outcome levels for each value of `cyl`, by collapsing the "3" and "4" outcome levels:

```{r}
nom <- multinom(factor(gear) ~ mpg + factor(cyl), data = mtcars, trace = FALSE)

by <- expand.grid(
    group = 3:5,
    cyl = c(4, 6, 8),
    stringsAsFactors = TRUE) |>
    # define labels
    transform(by = ifelse(
        group %in% 3:4,
        sprintf("3/4 Gears & %s Cylinders", cyl),
        sprintf("5 Gears & %s Cylinders", cyl)))

predictions(nom, by = by)
```

And we can then compare the different groups using the `hypothesis` argument:

```{r}
predictions(nom, by = by, hypothesis = "pairwise")
```


## Themes and styles

We can also use `plot_predictions()` in models with multinomial outcomes or grouped coefficients. For example, notice that when we call `draw=FALSE`, the result includes a `group` column:

```{r}
library(MASS)
library(ggplot2)

mod <- nnet::multinom(factor(gear) ~ mpg, data = mtcars, trace = FALSE)

p <- plot_predictions(
    mod,
    type = "probs",
    condition = "mpg",
    draw = FALSE)

head(p)
```

Now we use the `group` column:

```{r}
plot_predictions(
    mod,
    type = "probs",
    condition = "mpg") +
    facet_wrap(~group)
```

